# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  sca_scan_job: # Lacework SCA Scan
    runs-on: ubuntu-latest  # The job runs on the latest Ubuntu environment 

    steps: 
      # Step 1: Install the Lacework CLI and SCA component 
      - name: Install Lacework CLI 
        run: | 
          # Download and install the Lacework CLI using a shell script 
          curl https://raw.githubusercontent.com/lacework/go-sdk/main/cli/install.sh | bash 
          # Configure the Lacework CLI with account, API key, and secret from GitHub secrets 
          lacework configure -a ${{ secrets.LW_ACCOUNT }}.lacework.net -k ${{ secrets.LW_API_KEY }} -s ${{ secrets.LW_API_SECRET }} --noninteractive 
          # Install the Software Composition Analysis (SCA) component 
          lacework component install sca 

      # Step 2: Check out the source branch (head of the pull request) 
      - name: Checkout source branch 
        uses: actions/checkout@v3  # Use the checkout action to pull the source branch code 
        with: 
          ref: ${{ github.event.pull_request.head.ref }}  # Reference the source branch of the pull request 
          token: ${{ secrets.GITHUB_TOKEN }}  # Use the GitHub token for authentication 

      # Step 3: Run the Lacework SCA scan on the source branch and save the output 
      - name: Run Lacework SCA Scan on source Branch 
        run: | 
          # Scan the target branch code, output in SARIF format, and save to /tmp/lacework-scan-target.json 
          lacework sca scan ./ -f sarif -o /tmp/lacework-scan-target.json --save-results=true | tee /tmp/lacework-summary.txt
          # found critical vulnerability count
          critical_value=$(grep -oP 'Critical:\s*\K\d+' "$filename" | head -1)
          echo "Found crtical vulnereabilities: $critical_value"
          if [ $critical_value >= 2 ]; then
            exit 1
          fi
          
          
          

